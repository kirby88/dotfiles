export CLICOLORS=1;
export EDITOR=nvim
export VISUAL=nvim

print "\n##############\n## Welcome ##\n#############\n"

first=0
precmd() {
  if [ $first -eq 0 ]
    then
    PROMPT=""
    first=1
    else
    PROMPT="%F{black}%(?.%K{green} ✅.%K{red} ❌) %(?.%k. Exit code %? %k)%f"$'\n\n'
  fi
  PROMPT+="%F{blue}%B%~%b%f"$'\n'"%F{white}%B$%b%f "
}
RPROMPT="%D{%d/%m/%Y %H:%M:%S}"

preexec () {
}
# RPROMPT='%W %*' # Display date and time on the right

# pyenv installation
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Directory stack cf. https://thevaluable.dev/zsh-install-configure/
setopt AUTO_PUSHD           # Push the current directory visited on the stack.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd.
for index ({1..9}) alias "$index"="cd +${index}"; unset index
# Autocompletion
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # With hidden files
# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
# bindkey -v '^?' backward-delete-char
bindkey -e # emacs key bindings
# bindkey -v # vim key bindings

function csv {
    perl -pe 's/((?<=,)|(?<=^)),/ ,/g;' "$1" | column -t -s, | less  -F -S -X -K
}

## FZF
FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules "
export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --inline-info --pointer · --color dark\
	--preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always --wrap=never --theme=OneHalfDark {} || cat {}) 2> /dev/null | head -300'\
	--preview-window='right:nowrap' \
	--bind='f3:execute(bat --style=numbers --color=always --theme=OneHalfDark {} || less -f {}),ctrl-b:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy),ctrl-x:execute(rm -i {+})+abort'"
export FZF_DEFAULT_COMMAND="fd --type f --type l $FD_OPTIONS"
export FZF_CTRL_T_COMMAND="fd --type f $FD_OPTIONS -E '*.xcodeproj' -E '*.appiconset' -E '*.localized' $FZF_CTRL_T_COMMAND_DIRECTORIES"
export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="/usr/local/opt/e2fsprogs/bin:$PATH"

## Source machine specific code
if [ -f ~/.zshrc_local.zsh ]
then
    source ~/.zshrc_local.zsh
    print "✅ ~/.zsh/local.zsh found"
else
    print "❌ ~/.zsh/local.zsh not found"
fi

# Source aliases
if [ -f ~/.zsh/aliases.zsh ]; then
    source ~/.zsh/aliases.zsh
    print "✅ ~/.zsh/aliases.zsh found"
else
    print "❌ ~/.zsh/aliases.zsh not found"
fi

# Autocompletion
if [ -f ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
    print "✅ ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh found"
else
    print "❌ ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh not found"
fi

# Interactive CD
if [ -f ~/.zsh/zsh-interactive-cd.plugin.zsh ]; then
    source ~/.zsh/zsh-interactive-cd.plugin.zsh
    print "✅ ~/.zsh/zsh-interactive-cd.plugin.zsh found"
else
    print "❌ ~/.zsh/zsh-interactive-cd.plugin.zsh not found"
fi

# Timer 
if [ -f ~/.zsh/timer.plugin.zsh ]; then
    source ~/.zsh/timer.plugin.zsh
    TIMER_FORMAT='[%d]'; TIMER_PRECISION=2 
    print "✅ ~/.zsh/timer.plugin.zsh found"
else
    print "❌ ~/.zsh/timer.plugin.zsh not found"
fi
print "\n"

